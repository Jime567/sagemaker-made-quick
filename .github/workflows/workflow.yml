name: Terraform Workflow

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose Terraform action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - deploy (Start JupyterLab)
          - destroy
          - destroy (with retry-delete, requires PAT_TOKEN secret)

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    env:
      TF_IN_AUTOMATION: "true"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0

      - name: Terraform Init
        run: terraform init

      # ---------------------------------------------------------------
      # DEPLOY ACTION
      # ---------------------------------------------------------------
      - name: Terraform Fmt
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'deploy (Start JupyterLab)'
        run: terraform fmt -check

      - name: Terraform Plan
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'deploy (Start JupyterLab)'
        run: terraform plan -out=tfplan.binary

      - name: Terraform Apply
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'deploy (Start JupyterLab)'
        run: terraform apply -auto-approve tfplan.binary

      # Capture the Terraform output for JupyterLab startup
      - name: Get Terraform outputs
        if: github.event.inputs.action == 'deploy (Start JupyterLab)'
        id: tf_outputs
        run: |
          echo "user_profile_name=$(terraform output -raw user_profile_name)" >> $GITHUB_OUTPUT
          echo "domain_id=$(terraform output -raw domain_id)" >> $GITHUB_OUTPUT

      # ---------------------------------------------------------------
      # Automatically start JupyterLab after deployment
      # ---------------------------------------------------------------
      - name: Install AWS CLI
        if: github.event.inputs.action == 'deploy (Start JupyterLab)'
        run: pip install awscli

      - name: Start SageMaker JupyterLab App
        if: github.event.inputs.action == 'deploy (Start JupyterLab)'
        run: |
          aws sagemaker create_app \
            --domain-id ${{ steps.tf_outputs.outputs.domain_id }} \
            --user-profile-name ${{ steps.tf_outputs.outputs.user_profile_name }} \
            --app-type JupyterServer \
            --app-name default
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      # ---------------------------------------------------------------
      # DESTROY ACTION
      # ---------------------------------------------------------------
      - name: Set up Python (Destroy only)
        if: github.event.inputs.action == 'destroy' || github.event.inputs.action == 'destroy (with retry-delete, requires PAT_TOKEN secret)'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install cleanup dependencies (Destroy only)
        if: github.event.inputs.action == 'destroy' || github.event.inputs.action == 'destroy (with retry-delete, requires PAT_TOKEN secret)'
        run: pip install boto3 sagemaker

      - name: Run SageMaker cleanup script (Destroy only)
        if: github.event.inputs.action == 'destroy' || github.event.inputs.action == 'destroy (with retry-delete, requires PAT_TOKEN secret)'
        id: cleanup
        continue-on-error: true
        run: |
          echo "Running pre-destroy cleanup script..."
          if ! python -u ../clean-up-script.py; then
            echo "Cleanup failed, writing flag..."
            echo "cleanup_failed=true" >> $GITHUB_OUTPUT
          fi
        env:
          AWS_DEFAULT_REGION: us-east-1

      - name: Terraform Destroy (Destroy only)
        if: github.event.inputs.action == 'destroy' || github.event.inputs.action == 'destroy (with retry-delete, requires PAT_TOKEN secret)'
        run: terraform destroy -auto-approve

      # ---------------------------------------------------------------
      # Trigger retry-delete workflow
      # ---------------------------------------------------------------
      - name: Repository Dispatch to Trigger retry-delete workflow
        if: github.event.inputs.action == 'destroy (with retry-delete, requires PAT_TOKEN secret)'
        uses: peter-evans/repository-dispatch@v4
        with:
          event-type: delete-mlflow
          token: ${{ secrets.PAT_TOKEN }}
